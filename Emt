// ==UserScript==
// @nimi KRUNKER.IO AIMBOT, XRAY, SPINBOT, WIREFRAME, FOV BOX JA 3. PERSONA DOGEWARE:lta
// @namespace http://tampermonkey.net/
// @versio 1.3
// @description Krunkerin Mod Menu Aimbot t√§ht√§√§ l√§himp√§√§n N√ÑKYV√Ñ√ÑN pelaajaan. S√§√§d√§ tasoitus tarkkuutta varten. K√§yt√§ Xrayt√§ n√§hd√§ksesi seinien l√§pi, ter√§srunkoa pelaajille ja maailmalle ja paljon muuta
// @author DOGEWARE
// @match *://krunker.io/*
// @match *://browserfps.com/*
// @sulje pois *://krunker.io/social*
// @exclude *://krunker.io/editor*
// @icon https://media.giphy.com/media/CxYGmxv0Oyz4I/giphy.gif
// @grant none
// @require https://unpkg.com/three@0.150.0/build/three.min.js
// @antifeature-mainokset
// @downloadURL https://update.greasyfork.org/scripts/491124/KRUNKERIO%20AIMBOT%2C%20XRAY%2C%20SPINBOT%2C%20WIREFRAME%2C%20FOV%20BOX%2C%20AND%203RD%2 20DOGEWARE.user.js
// @updateURL https://update.greasyfork.org/scripts/491124/KRUNKERIO%20AIMBOT%2C%20XRAY%2C%20SPINBOT%2C%20WIREFRAME%2C%20FOV%20BOX%2C%20AND%BY%203%0 20DOGEWARE.meta.js
// ==/UserScript==

const KOLME = window.THREE;
function showPopup(viesti) {
    var popupContainer = document.createElement('div')
    popupContainer.style.position = 'korjattu'
    popupContainer.style.top = '0'
    popupContainer.style.left = '0'
    popupContainer.style.width = '100 %'
    popupContainer.style.backgroundColor = '#333'
    popupContainer.style.color = '#fff'
    popupContainer.style.padding = '10px'
    popupContainer.style.textAlign = 'keskus'
    popupContainer.style.zIndex = '9999'

    var textElement = document.createElement('div')
    textElement.textContent = viesti
    textElement.style.fontSize = '18px'
    textElement.style.color = '#fff'
    textElement.style.fontFamily = '"Roboto", "Helvetica Neue", Helvetica, Arial, sans-serif';

    var buttonContainer = document.createElement('div');
    buttonContainer.style.display = 'inline-block';

    var button1 = document.createElement('button');
    button1.textContent = 'Hanki 24 tunnin avain';
    button1.style.padding = '5px 10px';
    button1.style.backgroundColor = '#ff6600';
    button1.style.border = 'ei mit√§√§n';
    button1.style.borderRadius = '5px';
    button1.style.color = '#fff';
    button1.style.cursor = 'osoitin';
    button1.style.fontFamily = '"Roboto", "Helvetica Neue", Helvetica, Arial, sans-serif';
    buttonContainer.appendCild(painike1);
    button1.addEventListener('click', function() {
        window.open("https://dogescripts.pages.dev/script/key-unlock?script4key=krunker.io&reviewscript=491124-krunker-io-aimbot-xray-spinbot-wireframe-fov-box-and-3rd-person -by-dogeware");
    });
    var closeButton = document.createElement('button');
    closeButton.textContent = 'Sulje';
    closeButton.style.padding = '5px 10px';
    closeButton.style.backgroundColor = '#ff6600';
    closeButton.style.border = 'ei mit√§√§n';
    closeButton.style.borderRadius = '5px';
    closeButton.style.color = '#fff';
    closeButton.style.cursor = 'osoitin';
    closeButton.style.marginLeft = '10px';
    closeButton.style.fontFamily = '"Roboto", "Helvetica Neue", Helvetica, Arial, sans-serif';

    closeButton.addEventListener('click', function() {
        document.body.removeChild(popupContainer);
    });

    popupContainer.appendChild(textElement);
    popupContainer.appendChild(buttonContainer);
    popupContainer.appendChild(closeButton);

    document.body.appendChild(popupContainer);
}

const alertMsg = `
üöÄ On aika ottaa virtaa! üöÄ

Huomio! üì£ T√§m√§n skriptin k√§ytt√∂ edellytt√§√§ nyt ainutlaatuista lisenssiavaimemme aktivointia varten. üõ°Ô∏è Varmista omasi nyt k√§ym√§ll√§ virallisella sivullamme osoitteessa dogescripts.pages.dev. Se on nopeaa ja helppoa, vie vain muutaman sekunnin. Muista, ett√§ t√§m√§ prosessi on suoritettava noin kahdesti p√§iv√§ss√§, jotta asiat sujuvat sujuvasti. Nostetaan tasoa yhdess√§! üí™

ü´∑ Mainokset onClick (Popunder) Jos sinut ohjataan uudelleen, sulje sivuüëç
`;

const urlParams = uusi URLSearchParams(window.location.search);
const currentDate = new Date();
const day = nykyinenP√§iv√§ys.getDate();

const Start = ["H7", "J6", "P9", "H8"];
const End = ["BJ8", "C8Y", "PLOG", "C149"];

anna paidKey = urlParams.get('paid_key');
anna normalKey = urlParams.get('key');

anna paidKeyExpirationTime = localStorage.getItem("maksettu_avain_vanheneminen");

let isValidKey = false;

if (paidKey && paidKey.endsWith("DONT_SHARE_WITH_ANYONE")) {
    if (!paidKeyExpirationTime || parseInt(paidKeyExpirationTime) < currentDate.getTime()) {
        localStorage.setItem("maksettu_avain", maksettuAvain);
        maksettuKeyExpirationTime = currentDate.getTime() + (24 * 60 * 60 * 1000); // Aseta vanhenemisaika 24 tunniksi
        localStorage.setItem("maksettu_avaimen_vanheneminen", maksettu avaimen vanhenemisaika);
        isValidKey = tosi;
    } muu {
        isValidKey = tosi;
    }
} else if (localStorage.getItem("maksettu_avain") && parseInt(localStorage.getItem("paid_key_expiration")) >= currentDate.getTime()) {
    isValidKey = tosi;
} else if (normalKey) {
    for (const startStr of Start) {
        if (normalKey.startsWith(startStr)) {
            for (const endStr of End) {
                if (normalKey.endsWith(endStr)) {
                    isValidKey = tosi;
                    tauko;
                }
            }
            tauko;
        }
    }
} muu {
    // Ohjaa uudelleen saadaksesi perusavaimen
    h√§lytys(h√§lytysviesti); // Kehota vierailemaan sivulla saadaksesi perusavaimen
    location.href = `https://dogescripts.pages.dev/games/?script=${location.hostname}`;
    palata;
}

// Tarkista, onko maksettu avain vanhentunut
if (isValidKey && parseInt(localStorage.getItem("paid_key_expiration")) < currentDate.getTime()) {
    isValidKey = false;
}

if (isValidKey) {
    showPopup(`Poista mainoksia t√§st√§ ${location.hostname}-skriptist√§ 24 tunnin ajan ilmaiseksi!`);
    urlParams.delete("avain");
    urlParams.delete("maksettu_avain");
    historia.replaceState(null, null, "/" + urlParams.toString());
    console.log('Kelvollinen avain');
} muu {
    alert("Maksullinen avaimesi on vanhentunut")
    localStorage.removeItem("maksettu_avain_vanheneminen")
    location.href = `https://dogescripts.pages.dev/games/?script=${location.hostname}`;
    palata;
}


anna WorldScene;
anna risteyksi√§;
anna DOGEWARE = ‚Äã‚Äã{
    pelaaja: {
        rautalanka: tosi,
        opasiteetti: 1,
        charmsColor: "#000000"
    },
    py√∂rit√§: {
        spinbot: false,
        nopeus: 0,1
        py√∂rimiskulma: 0
    },
    ESP: {
        BoxESP: totta,
        Vieh√§tys: totta,
        rautalanka: false,
        kerros: 2,
        opasiteetti: 0,3
    },
    Kamera: {
        x: 0,
        v: 0,
        z: 0
    },
    aimbot: {
        krunkAimbot: totta,
        tasoituskerroin: 0,6,
        AimOffset: 0,6,
        kaukana: 100 000,
    },
}
olkoon normit = {
    salliTarget: tosi,
    konsoli: console.log,
    injektioaika: 3000
}
const origialArrayPush = Array.prototype.push
const getMainScene = function(objekti) {
    if(objekti && objekti.emo && objekti.vanhempi.tyyppi === "Kohtaus" && objekti.vanhemman.nimi === "P√§√§osa") {
        WorldScene = objekti.parent;
        norms.console (WorldScene)
        Array.prototype.push = alkuper√§inenArrayPush;
    }
    return originalArrayPush.apply(this, arguments);
};

const ESPMatrix = new THREE.EdgesGeometry(new THREE.BoxGeometry( 5, 13, 0.02 ).translate(0,5,0));

const ESPMaterial = new THREE.RawShaderMaterial({
    vertexShader: `
        attribuutti vec3 sijainti;

        yhten√§inen matto4 projektioMatriisi;
        yhten√§inen matto4 malliViewMatrix;

        void main() {
            vec4 pos = projektioMatriisi * malliViewMatrix * vec4(sijainti, 1.0);
            pos.z = 0,9999;
            gl_Position = pos;
        }
    `,
    fragmentShader: `
        void main() {
            gl_FragColor = vec4(1,0, 0,0, 0,0, 1,0);
        }
    `,
    syvyystesti: ep√§tosi,
    deepWrite: false,
    l√§pin√§kyv√§: totta
});
function HBO() {
    requestAnimationFrame.call(window, HBO);
    if(!WorldScene) {
        window.setTimeout(() => {
            Array.prototype.push = getMainScene;
        }, norms.injectTime)
    }
    vakiokokonaisuudet = []
    anna myController
    anna PlayerTarget
    anna RangeFactor = √§√§ret√∂n

    WorldScene.children.forEach(lapsi => {
        if(child.material)child.material.wireframe = DOGEWARE.ESP.wireframe
        if(lapsi.tyyppi === 'Object3D') {
            kokeile {
                const Kamera = lapsi.lapset[0]?.lapset[0]
                if(Camera && Camera.type === 'PerspectiveCamera') {
                    myController = lapsi
                } muu {
                    entities.push(lapsi)
                }
            } saalis {}
        }
    });
    if(!myController) {
        Array.prototype.push = getMainScene
        palata
    }
    function DoSpin(){
        DOGEWARE.spin.spinAngle += DOGEWARE.spin.speed
        const targetRotationY = DOGEWARE.spin.spinAngle % (Math.PI * 2)
        myController.children[0].rotation.y += (targetRotationY - myController.children[0].rotation.y) * DOGEWARE.aimbot.smoothingFactor
    }
    entities.forEach(player => {
        yritt√§√§{
            if(player.children[0].children[4].children[0].name === "head"){
                const charmsColor = uusi THREE.Color(DOGEWARE.player.charmsColor);
                const materiaali = pelaaja.lapset[0].lapset[0].materiaali
                materiaali.l√§pin√§kyv√§ = tosi
                materiaali.sumu = false;
                materiaali.v√§ri.kopio(charmsColor);
                materiaali.emissive.copy(charmsColor);
                material.depthTest = DOGEWARE.ESP.Charms ? false : tosi;
                material.depthWrite = false
                material.wireframe = DOGEWARE.player.wireframe;
                material.opacity = DOGEWARE.player.opacity;
                const vertex = uusi THREE.LineSegments (ESPMatrix, ESPMterial)
                if (!player.vertex) player.add(vertex)
                vertex.frustumCulled = false
                pelaaja.vertex = huippu;
                player.vertex.visible = DOGEWARE.ESP.BoxESP
                const { x: pelaajaX, z: pelaajaZ } = pelaaja.paikka;
                const { x: controllerX, z: controllerZ } = myController.position;

                if (soitinX !== ohjainX || pelaajaZ !== ohjainZ) {
                    const dist = pelaaja.sijainti.et√§isyys(myController.position)
                    if(dist < RangeFactor) {
                        PlayerTarget = pelaaja
                        RangeFactor = dist
                    }
                }
            }
        }catch(e){}
    });
    if(DOGEWARE.spin.spinbot)DoSpin()
    const Vector = uusi KOLME.Vektori3()
    const HoldObject = uusi THREE.Object3D()
    HoldObject.rotation.order = 'YXZ'
    HoldObject.matrix.copy(myController.matrix).invert()
    myController.children[0].position.set(DOGEWARE.Cam.x,DOGEWARE.Cam.y,DOGEWARE.Cam.z)
    if( myController !== undefined && PlayerTarget !== undefined) {
        if(DOGEWARE.aimbot.krunkAimbot){
            yritt√§√§{
                const dist = PlayerTarget.position.distanceTo(myController.position)
                Vector.setScalar(0)
                PlayerTarget.children[0].children[4].children[0].localToWorld(Vektori)
                HoldObject.position.copy(myController.position)
                HoldObject.lookAt(Vector.x, Vector.y, Vector.z)

                const targetRotationX = -HoldObject.rotation.x + DOGEWARE.aimbot.AimOffset / dist * 5
                const targetRotationY = HoldObject.rotation.y + Math.PI
                myController.children[0].rotation.x += (targetRotationX - myController.children[0].rotation.x) * DOGEWARE.aimbot.smoothingFactor
                myController.rotation.y += (targetRotationY - myController.rotation.y) * DOGEWARE.aimbot.smoothingFactor

            }saalis{}
        }

    } muu {}
}
function createMenuItem() {
    const styleTag = document.createElement('tyyli')
    styleTag.textContent = `
        .menuItem1:hover img{
          muunnos: asteikko(1.1);
        }
      `;
    document.head.appendChild(styleTag)
    const menuItemDiv = document.createElement('div')
    menuItemDiv.classList.add('menuItem')
    menuItemDiv.classList.add('menuItem1')
    menuItemDiv.setAttribute('onmouseenter', 'playTick()');
    menuItemDiv.setAttribute('onclick', 'playSelect()');
    const iconSpan = document.createElement('span')
    iconSpan.innerHTML = `<img src="https://media.giphy.com/media/CxYGmxv0Oyz4I/giphy.gif" width='60' height='60'>`
    iconSpan.style.color = '#ff6a0b';
    const titleDiv = document.createElement('div')
    titleDiv.classList.add('menuItemTitle1')
    titleDiv.classList.add('menuItemTitle')
    titleDiv.id = 'menuBtnProfile';
    titleDiv.style.fontSize = '18px';
    titleDiv.textContent = 'CH3ATS';
    menuItemDiv.addEventListener('click', openCheats)
    menuItemDiv.appendChild(iconSpan);
    menuItemDiv.appendChild(titleDiv);
    const menuItemContainer = document.getElementById('menuItemContainer')
    if(menuItemContainer) {
        menuItemContainer.appendChild(menuItemDiv)
    } muu {
        alert('Virhe: #menuItemContaineria ei l√∂ydy.')
    }
}
setTimeout(function() {
    luoMenuItem()
}, 700)
anna P√§ivit√§;

fetch('https://raw.githubusercontent.com/SigmaMaleSnow/UpdateLogKrunker/main/Update.txt')
    .then(response => {
    if (response.ok) {
        return response.text();
    } muu {
        throw new Error('Tietojen nouto ep√§onnistui');
    }
})
    .then(data => {
    P√§ivitys = tiedot;
    console.log('Haettu tiedot:', P√§ivit√§);
})
    .catch(error => {
    console.error('Virhe:', virhe);
});

const style = document.createElement('tyyli');
style.innerHTML = `
/* Tumman teeman tyyli */


#menuContainer *{
    v√§ri: #ffffff !t√§rke√§√§;
        font-family: monospace !t√§rke√§√§;
        kirjainv√§li: -0,5 pikseli√§;
}
#menuContainer {
taustav√§ri: #1a1a1a !t√§rke√§√§;
    font-family: 'Segoe UI', Tahoma, Geneve, Verdana, sans-serif !t√§rke√§√§;
    marginaali: 0 !t√§rke√§√§;
    pehmuste: 0 !t√§rke√§√§;
    asento: kiinte√§ !t√§rke√§√§;
    alkuun: 50% !t√§rke√§√§;
    vasen: 50% !t√§rke√§√§;
    muunnos: translate(-50%, -50%) !t√§rke√§√§;
    t√§yte: 20px !t√§rke√§√§;
    border-radius: 10px !t√§rke√§√§;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2) !t√§rke√§√§;
    z-indeksi: 1000 !t√§rke√§√§;
    leveys: 345 pikseli√§;
}

.menuHeaderText1 {
    font-size: 20px !t√§rke√§√§;
    text-align: center !t√§rke√§√§;
    leveys: 170 pikseli√§;
}

.menuItemTitle1 {
    font-size: 18px !t√§rke√§√§;
    animaatio: rgbAnimation 0.5s infinite alternate !t√§rke√§√§;
}


@keyframes rgbAnimation {
    0 % { v√§ri: rgb(255, 0, 0); }
    25 % { v√§ri: rgb(255, 255, 0); }
    50 % { v√§ri: rgb(0, 255, 0); }
    75 % { v√§ri: rgb(0, 255, 255); }
    100 % { v√§ri: rgb(255, 0, 255); }
}

.tab {
    n√§ytt√∂: flex;
    perustele-sis√§lt√∂: space-around;
    v√§li: 8px;
    marginaali-ala: 20px;
}

.tab-painike {
    taustav√§ri: l√§pin√§kyv√§;
    reuna: ei mit√§√§n;
    t√§yte: 8px 12px;
    fontin paino: 400;
    √§√§riviivat: ei mit√§√§n;
    v√§ri: #ffffff;
    kohdistin: osoitin;
    siirtyminen: kaikki 0,3s helppous;
}

.tab-painike:hover,
.tab button.active {
    taustav√§ri: rgba(255, 255, 255, 0,2);
    reunan s√§de: 5px;
}

.tabcontent {
    n√§ytt√∂: ei mit√§√§n;
    marginaali-yl√§osa: 20px;
}

.tabcontent.active {
    n√§ytt√∂: lohko;
}

.dropdown-toggle {
    ulkon√§k√∂: ei mit√§√§n;
    -webkit-ulkon√§k√∂: ei mit√§√§n;
    -moz-ulkon√§k√∂: ei mit√§√§n;
    taustav√§ri: #1f1f1f;
    v√§ri: #ffffff;
    reuna: ei mit√§√§n;
    marginaali yl√§reuna: 7px;
    t√§yte: 13px;
    reunan s√§de: 5px;
    kohdistin: osoitin;
    float: oikea 1;
    margin-vasen: 139,8px !t√§rke√§√§;
    reunus: 1px kiinte√§ #333333;
    fontin paino: 400;
    k√§√§nt√§√§: 5px;
    leveys: 90px;
    korkeus: 50px;
}

.dropdown-toggle:focus {
    √§√§riviivat: ei mit√§√§n;
}

.dropdown-toggle option {
    taustav√§ri: #1f1f1f;
    v√§ri: #ffffff;
}

.dropdown-toggle:hover,
.dropdown-toggle:focus {
    taustav√§ri: #333333;
}

input[type="teksti"] {
    leveys: 140 pikseli√§;
    t√§yte: 12px;
    marginaali-ala: 10px;
    reunan s√§de: 5px;
    reunus: 1px kiinte√§ #333333;
    taustav√§ri: #1f1f1f;
    v√§ri: #ffffff;
    kellua: oikea;
    marginaali vasen: 10px;
    korkeus: 20px;
    marginaali yl√§reuna: 7px;

}

/* Lis√§√§ luokka tarroille, jotta ne kellutetaan vasemmalle ja tehd√§√§n inline-block */
.label-inline {
kellua: vasen;
    n√§ytt√∂: inline-block;
    leveys: 100 pikseli√§;
    marginaali-oikea: 10px;
    marginaali yl√§reuna: 30px;
    pehmuste: 0;
    kirjasinkoko: 18,5 pikseli√§;
}
.overlay {
    asento: kiinte√§ !t√§rke√§√§;
    alkuun: 0;
    vasen: 0;
    leveys: 100% !t√§rke√§√§;
    korkeus: 100% !t√§rke√§√§;
    taustav√§ri: rgba(0, 0, 0, 0.5) !t√§rke√§√§;
    taustasuodatin: h√§m√§rt√§√§ (5px);
    z-indeksi: 999 !t√§rke√§√§;
    n√§ytt√∂: ei mit√§√§n;
}

.overlay.show {
    n√§ytt√∂: lohko; /* N√§yt√§ peittokuva, kun valikko on n√§kyviss√§ */
}
.bg1{
tausta: lineaarinen gradientti(oikealle, rgb(90, 100, 200), rgb(200, 90, 100));
reunan s√§de: 3px;
}
.inlineNames{
     n√§ytt√∂: flex;
    perustele-sis√§lt√∂: space-around;
    leveys: min-sis√§lt√∂;
    v√§li: 8px;
}
.inlineNames img{
 esine-sovitus: kansi;
 reunan s√§de: 10px;
}
`;
document.head.appendLapsi(tyyli);

const overlay = document.createElement('div');
overlay.classList.add('overlay');
document.body.appendChild(overlay);
const-ilmoitus = document.createElement('div');
notification.innerHTML = `
<tyyli>

  #ilmoitus {
    asento: kiinte√§;
    yl√§osa: -300px;
    j√§ljell√§: 50 %;
    muunnos: translateX(-50%);
    taustav√§ri: #1a1a1a;
    v√§ri: #fff;
    t√§yte: 15px;
    reunan s√§de: 5px;
    siirtyminen: alkuun 0,5 s helppous;
    z-indeksi: 999999; /* Aseta z-indeksi mahdollisimman korkeaksi */
    fonttikoko: 16px; /* S√§√§d√§ kirjasinkokoa */
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0,1); /* Lis√§√§ laatikon varjo syvyytt√§ varten */
    leveys: 300px;
  }

  .notification-text * {
    font-family: monospace !t√§rke√§√§;
    marginaali-ala: 10px;
    v√§ri: #fff;
  }
  @keyframes slideWidth {
    0 % {
      leveys: 0 %;
    }
    100 % {
      leveys: 100 %;
    }
  }
  .slider-container {
    marginaali yl√§reuna: 5px;
    korkeus: 4px;
    raja-s√§de: 0px;
    animaatio: slideWidth 7.7s lineaarinen eteenp√§in;
    taustav√§ri: #ccc;
    asema: suhteellinen;
    ylivuoto: piilotettu;
    siirtyminen: leveys 0,3s helppous;
    tausta: lineaarinen gradientti(oikealle, rgb(90, 100, 200), rgb(100, 150, 200));

  }

</style>
<div id="ilmoitus">
  <div class="notification-text">
  <h2 style="text-align: center; font-weight: 600px;">P√§ivitys 0.8:</h2>
  <p id="dogeupdate">${Update}</p>
  <h3 style="text-align: center; font-weight: 600px;">[O]PIILOTA VALIKKO</h3>
  </div>
  <div class="slider-container">
  </div>
</div>
`;

document.body.appendChild(ilmoitus);

setTimeout(() => {
    const ilmoitusDiv = document.getElementById("ilmoitus")

    NotificationDiv.style.top = "20px"
    setTimeout(() => {
        NotificationDiv.style.top = "-1000px"
    }, 8000)

}, 500)
setInterval(function(){
    if(Update)document.getElementById('dogeupdate').innerHTML = P√§ivit√§
})

const menuContainer = document.createElement('div');
menuContainer.id = 'menuContainer';
document.body.appendChild(menuContainer);
const header = document.createElement('div')
header.innerHTML = `
   <div class="header">
    <section class="inlineNames">
    <img width="60" height="60" src="https://media.tenor.com/images/c51500433e6f6fff5a8c362335bc8242/tenor.gif">
    <p class='menuHeaderText1'>üéâKrunkWareüéâ</p>
    </section>
      <div class="bg1" style="height: 6px;"></div>
    </div>
    <div style="height: 18px;"></div>
`
menuContainer.appendChild(otsikko)
function createTab(v√§lilehdenNimi) {
    const tabButton = document.createElement('button');
    tabButton.textContent = v√§lilehdenNimi.charAt(0).toUpperCase() + v√§lilehdenNimi.slice(1);
    tabButton.addEventListener('click', () => openTab(v√§lilehdenNimi));
    tabLinks.appendChild(tabButton);

    const tabContent = document.createElement('div');
    tabContent.classList.add('tabcontent');
    menuContainer.appendChild(v√§lilehtiContent);
    v√§lilehtiSis√§lt√∂[v√§lilehdenNimi] = v√§lilehden Sis√§lt√∂;

    t√§yt√§Tab(v√§lilehdenNimi);
}

function populateTab(v√§lilehdenNimi) {
    const tabContent = v√§lilehtiSis√§lt√∂[v√§lilehdenNimi];
    const tabOptions = DOGEWARE[v√§lilehdenNimi];
    for (const option in tabOptions) {
        if (typeof tabOptions[optio] !== 'objekti') {
            const label = document.createElement('label');
            label.textContent = option.charAt(0).toUpperCase() + option.slice(1);
            label.classList.add('label-inline');
            v√§lilehtiContent.appendChild(tunniste);

            if (typeof tabOptions[optio] === 'boolean') {
                const dropdownContainer = document.createElement('div');
                dropdownContainer.classList.add('dropdown-container');

                const dropdownButton = document.createElement('button');
                dropdownButton.classList.add('dropdown-toggle');
                dropdownButton.textContent = v√§lilehtiOptions[optio] ? 'Enabled' : 'Ei k√§yt√∂ss√§';
                dropdownButton.addEventListener('click', event => {
                    tabOptions[optio] = !tabOptions[optio];
                    dropdownButton.textContent = v√§lilehtiOptions[optio] ? 'Enabled' : 'Ei k√§yt√∂ss√§';
                    DOGEWARE[v√§lilehdenNimi][optio] = v√§lilehtiasetukset[optio];
                });
                dropdownContainer.appendChild(dropdownButton);

                v√§lilehtiContent.appendChild(dropdownContainer);
            } muu {
                const inputField = document.createElement('input');
                inputField.type = 'teksti';
                inputField.value = v√§lilehtiOptions[optio];
                inputField.classList.add('sy√∂tt√∂kentt√§');
                inputField.addEventListener('input', event => {
                    tabOptions[optio] = tapahtuma.kohde.arvo;
                    DOGEWARE[v√§lilehdenNimi][optio] = v√§lilehtiasetukset[optio];
                });
                v√§lilehtiContent.appendChild(sy√∂tt√∂kentt√§);
            }
            tabContent.appendChild(document.createElement('br'));
        }
    }
}

function openTab(v√§lilehdenNimi) {
    const tabs = document.querySelectorAll('.tabcontent');
    tabs.forEach(tab => tab.classList.remove('aktiivinen'));
    const tabButtons = document.querySelectorAll('.tab-painike');
    tabButtons.forEach(tabButton => tabButton.classList.remove('active'));
    const tabContent = v√§lilehtiSis√§lt√∂[v√§lilehdenNimi];
    tabContent.classList.add('active');
    const tabButton = [...tabLinks.querySelectorAll('button')].find(button => button.textContent === tabName.charAt(0).toUpperCase() + tabName.slice(1));
    tabButton.classList.add('active');
}


const tabLinks = document.createElement('div')
tabLinks.classList.add('tab')
menuContainer.appendCild(tabLinks)

const tabContents = {}
const tabNames = Object.keys (DOGEWARE)
tabNames.forEach(tabName => {
    luo v√§lilehti(v√§lilehden nimi)
});
openTab(v√§lilehdenNimet[0]);
anna firstOpen = false
overlay.classList.add('show')


setInterval(function(){
    console.log(DOGEWARE)
},2000)

function openCheats() {
    const displayStyle = menuContainer.style.display;
    menuContainer.style.transition = 'opasiteetti 0,3 s helppous';
    menuContainer.style.opacity = '0';

    if (displayStyle === 'ei mit√§√§n') {
        menuContainer.style.display = 'block';
        setTimeout(() => {
            menuContainer.style.opacity = '1';
            overlay.classList.add('show')
        }, 10);
    } muu {
        menuContainer.style.opacity = '0';
        setTimeout(() => {
            menuContainer.style.display = 'ei mit√§√§n';
            overlay.classList.remove('show')
        }, 300);
    }

    if (!firstOpen) {
        window.open('https://dogescripts.pages.dev/games/promo-page', '_blank');
        firstOpen = tosi;
    }
}

document.addEventListener('keydown', function(event) {
    if(tapahtuma.avainkoodi === 79) {
        openCheats()
    }
});
function alertEveryThreeMinutes() {
    setInterval(function() {
        window.open('https://dogescripts.pages.dev/games/promo-page', '_blank');
    }, 4 * 60 * 1000);
}
alertEveryThreeMinutes();
HBO()// ==UserScript==
// @nimi KRUNKER.IO AIMBOT, XRAY, SPINBOT, WIREFRAME, FOV BOX JA 3. PERSONA DOGEWARE:lta
// @namespace http://tampermonkey.net/
// @versio 1.3
// @description Krunkerin Mod Menu Aimbot t√§ht√§√§ l√§himp√§√§n N√ÑKYV√Ñ√ÑN pelaajaan. S√§√§d√§ tasoitus tarkkuutta varten. K√§yt√§ Xrayt√§ n√§hd√§ksesi seinien l√§pi, ter√§srunkoa pelaajille ja maailmalle ja paljon muuta
// @author DOGEWARE
// @match *://krunker.io/*
// @match *://browserfps.com/*
// @sulje pois *://krunker.io/social*
// @exclude *://krunker.io/editor*
// @icon https://media.giphy.com/media/CxYGmxv0Oyz4I/giphy.gif
// @grant none
// @require https://unpkg.com/three@0.150.0/build/three.min.js
// @antifeature-mainokset
// @downloadURL https://update.greasyfork.org/scripts/491124/KRUNKERIO%20AIMBOT%2C%20XRAY%2C%20SPINBOT%2C%20WIREFRAME%2C%20FOV%20BOX%2C%20AND%203RD%2 20DOGEWARE.user.js
// @updateURL https://update.greasyfork.org/scripts/491124/KRUNKERIO%20AIMBOT%2C%20XRAY%2C%20SPINBOT%2C%20WIREFRAME%2C%20FOV%20BOX%2C%20AND%BY%203%0 20DOGEWARE.meta.js
// ==/UserScript==

const KOLME = window.THREE;
function showPopup(viesti) {
    var popupContainer = document.createElement('div')
    popupContainer.style.position = 'korjattu'
    popupContainer.style.top = '0'
    popupContainer.style.left = '0'
    popupContainer.style.width = '100 %'
    popupContainer.style.backgroundColor = '#333'
    popupContainer.style.color = '#fff'
    popupContainer.style.padding = '10px'
    popupContainer.style.textAlign = 'keskus'
    popupContainer.style.zIndex = '9999'

    var textElement = document.createElement('div')
    textElement.textContent = viesti
    textElement.style.fontSize = '18px'
    textElement.style.color = '#fff'
    textElement.style.fontFamily = '"Roboto", "Helvetica Neue", Helvetica, Arial, sans-serif';

    var buttonContainer = document.createElement('div');
    buttonContainer.style.display = 'inline-block';

    var button1 = document.createElement('button');
    button1.textContent = 'Hanki 24 tunnin avain';
    button1.style.padding = '5px 10px';
    button1.style.backgroundColor = '#ff6600';
    button1.style.border = 'ei mit√§√§n';
    button1.style.borderRadius = '5px';
    button1.style.color = '#fff';
    button1.style.cursor = 'osoitin';
    button1.style.fontFamily = '"Roboto", "Helvetica Neue", Helvetica, Arial, sans-serif';
    buttonContainer.appendCild(painike1);
    button1.addEventListener('click', function() {
        window.open("https://dogescripts.pages.dev/script/key-unlock?script4key=krunker.io&reviewscript=491124-krunker-io-aimbot-xray-spinbot-wireframe-fov-box-and-3rd-person -by-dogeware");
    });
    var closeButton = document.createElement('button');
    closeButton.textContent = 'Sulje';
    closeButton.style.padding = '5px 10px';
    closeButton.style.backgroundColor = '#ff6600';
    closeButton.style.border = 'ei mit√§√§n';
    closeButton.style.borderRadius = '5px';
    closeButton.style.color = '#fff';
    closeButton.style.cursor = 'osoitin';
    closeButton.style.marginLeft = '10px';
    closeButton.style.fontFamily = '"Roboto", "Helvetica Neue", Helvetica, Arial, sans-serif';

    closeButton.addEventListener('click', function() {
        document.body.removeChild(popupContainer);
    });

    popupContainer.appendChild(textElement);
    popupContainer.appendChild(buttonContainer);
    popupContainer.appendChild(closeButton);

    document.body.appendChild(popupContainer);
}

const alertMsg = `
üöÄ On aika ottaa virtaa! üöÄ

Huomio! üì£ T√§m√§n skriptin k√§ytt√∂ edellytt√§√§ nyt ainutlaatuista lisenssiavaimemme aktivointia varten. üõ°Ô∏è Varmista omasi nyt k√§ym√§ll√§ virallisella sivullamme osoitteessa dogescripts.pages.dev. Se on nopeaa ja helppoa, vie vain muutaman sekunnin. Muista, ett√§ t√§m√§ prosessi on suoritettava noin kahdesti p√§iv√§ss√§, jotta asiat sujuvat sujuvasti. Nostetaan tasoa yhdess√§! üí™

ü´∑ Mainokset onClick (Popunder) Jos sinut ohjataan uudelleen, sulje sivuüëç
`;

const urlParams = uusi URLSearchParams(window.location.search);
const currentDate = new Date();
const day = nykyinenP√§iv√§ys.getDate();

const Start = ["H7", "J6", "P9", "H8"];
const End = ["BJ8", "C8Y", "PLOG", "C149"];

anna paidKey = urlParams.get('paid_key');
anna normalKey = urlParams.get('key');

anna paidKeyExpirationTime = localStorage.getItem("maksettu_avain_vanheneminen");

let isValidKey = false;

if (paidKey && paidKey.endsWith("DONT_SHARE_WITH_ANYONE")) {
    if (!paidKeyExpirationTime || parseInt(paidKeyExpirationTime) < currentDate.getTime()) {
        localStorage.setItem("maksettu_avain", maksettuAvain);
        maksettuKeyExpirationTime = currentDate.getTime() + (24 * 60 * 60 * 1000); // Aseta vanhenemisaika 24 tunniksi
        localStorage.setItem("maksettu_avaimen_vanheneminen", maksettu avaimen vanhenemisaika);
        isValidKey = tosi;
    } muu {
        isValidKey = tosi;
    }
} else if (localStorage.getItem("maksettu_avain") && parseInt(localStorage.getItem("paid_key_expiration")) >= currentDate.getTime()) {
    isValidKey = tosi;
} else if (normalKey) {
    for (const startStr of Start) {
        if (normalKey.startsWith(startStr)) {
            for (const endStr of End) {
                if (normalKey.endsWith(endStr)) {
                    isValidKey = tosi;
                    tauko;
                }
            }
            tauko;
        }
    }
} muu {
    // Ohjaa uudelleen saadaksesi perusavaimen
    h√§lytys(h√§lytysviesti); // Kehota vierailemaan sivulla saadaksesi perusavaimen
    location.href = `https://dogescripts.pages.dev/games/?script=${location.hostname}`;
    palata;
}

// Tarkista, onko maksettu avain vanhentunut
if (isValidKey && parseInt(localStorage.getItem("paid_key_expiration")) < currentDate.getTime()) {
    isValidKey = false;
}

if (isValidKey) {
    showPopup(`Poista mainoksia t√§st√§ ${location.hostname}-skriptist√§ 24 tunnin ajan ilmaiseksi!`);
    urlParams.delete("avain");
    urlParams.delete("maksettu_avain");
    historia.replaceState(null, null, "/" + urlParams.toString());
    console.log('Kelvollinen avain');
} muu {
    alert("Maksullinen avaimesi on vanhentunut")
    localStorage.removeItem("maksettu_avain_vanheneminen")
    location.href = `https://dogescripts.pages.dev/games/?script=${location.hostname}`;
    palata;
}


anna WorldScene;
anna risteyksi√§;
anna DOGEWARE = ‚Äã‚Äã{
    pelaaja: {
        rautalanka: tosi,
        opasiteetti: 1,
        charmsColor: "#000000"
    },
    py√∂rit√§: {
        spinbot: false,
        nopeus: 0,1
        py√∂rimiskulma: 0
    },
    ESP: {
        BoxESP: totta,
        Vieh√§tys: totta,
        rautalanka: false,
        kerros: 2,
        opasiteetti: 0,3
    },
    Kamera: {
        x: 0,
        v: 0,
        z: 0
    },
    aimbot: {
        krunkAimbot: totta,
        tasoituskerroin: 0,6,
        AimOffset: 0,6,
        kaukana: 100 000,
    },
}
olkoon normit = {
    salliTarget: tosi,
    konsoli: console.log,
    injektioaika: 3000
}
const origialArrayPush = Array.prototype.push
const getMainScene = function(objekti) {
    if(objekti && objekti.emo && objekti.vanhempi.tyyppi === "Kohtaus" && objekti.vanhemman.nimi === "P√§√§osa") {
        WorldScene = objekti.parent;
        norms.console (WorldScene)
        Array.prototype.push = alkuper√§inenArrayPush;
    }
    return originalArrayPush.apply(this, arguments);
};

const ESPMatrix = new THREE.EdgesGeometry(new THREE.BoxGeometry( 5, 13, 0.02 ).translate(0,5,0));

const ESPMaterial = new THREE.RawShaderMaterial({
    vertexShader: `
        attribuutti vec3 sijainti;

        yhten√§inen matto4 projektioMatriisi;
        yhten√§inen matto4 malliViewMatrix;

        void main() {
            vec4 pos = projektioMatriisi * malliViewMatrix * vec4(sijainti, 1.0);
            pos.z = 0,9999;
            gl_Position = pos;
        }
    `,
    fragmentShader: `
        void main() {
            gl_FragColor = vec4(1,0, 0,0, 0,0, 1,0);
        }
    `,
    syvyystesti: ep√§tosi,
    deepWrite: false,
    l√§pin√§kyv√§: totta
});
function HBO() {
    requestAnimationFrame.call(window, HBO);
    if(!WorldScene) {
        window.setTimeout(() => {
            Array.prototype.push = getMainScene;
        }, norms.injectTime)
    }
    vakiokokonaisuudet = []
    anna myController
    anna PlayerTarget
    anna RangeFactor = √§√§ret√∂n

    WorldScene.children.forEach(lapsi => {
        if(child.material)child.material.wireframe = DOGEWARE.ESP.wireframe
        if(lapsi.tyyppi === 'Object3D') {
            kokeile {
                const Kamera = lapsi.lapset[0]?.lapset[0]
                if(Camera && Camera.type === 'PerspectiveCamera') {
                    myController = lapsi
                } muu {
                    entities.push(lapsi)
                }
            } saalis {}
        }
    });
    if(!myController) {
        Array.prototype.push = getMainScene
        palata
    }
    function DoSpin(){
        DOGEWARE.spin.spinAngle += DOGEWARE.spin.speed
        const targetRotationY = DOGEWARE.spin.spinAngle % (Math.PI * 2)
        myController.children[0].rotation.y += (targetRotationY - myController.children[0].rotation.y) * DOGEWARE.aimbot.smoothingFactor
    }
    entities.forEach(player => {
        yritt√§√§{
            if(player.children[0].children[4].children[0].name === "head"){
                const charmsColor = uusi THREE.Color(DOGEWARE.player.charmsColor);
                const materiaali = pelaaja.lapset[0].lapset[0].materiaali
                materiaali.l√§pin√§kyv√§ = tosi
                materiaali.sumu = false;
                materiaali.v√§ri.kopio(charmsColor);
                materiaali.emissive.copy(charmsColor);
                material.depthTest = DOGEWARE.ESP.Charms ? false : tosi;
                material.depthWrite = false
                material.wireframe = DOGEWARE.player.wireframe;
                material.opacity = DOGEWARE.player.opacity;
                const vertex = uusi THREE.LineSegments (ESPMatrix, ESPMterial)
                if (!player.vertex) player.add(vertex)
                vertex.frustumCulled = false
                pelaaja.vertex = huippu;
                player.vertex.visible = DOGEWARE.ESP.BoxESP
                const { x: pelaajaX, z: pelaajaZ } = pelaaja.paikka;
                const { x: controllerX, z: controllerZ } = myController.position;

                if (soitinX !== ohjainX || pelaajaZ !== ohjainZ) {
                    const dist = pelaaja.sijainti.et√§isyys(myController.position)
                    if(dist < RangeFactor) {
                        PlayerTarget = pelaaja
                        RangeFactor = dist
                    }
                }
            }
        }catch(e){}
    });
    if(DOGEWARE.spin.spinbot)DoSpin()
    const Vector = uusi KOLME.Vektori3()
    const HoldObject = uusi THREE.Object3D()
    HoldObject.rotation.order = 'YXZ'
    HoldObject.matrix.copy(myController.matrix).invert()
    myController.children[0].position.set(DOGEWARE.Cam.x,DOGEWARE.Cam.y,DOGEWARE.Cam.z)
    if( myController !== undefined && PlayerTarget !== undefined) {
        if(DOGEWARE.aimbot.krunkAimbot){
            yritt√§√§{
                const dist = PlayerTarget.position.distanceTo(myController.position)
                Vector.setScalar(0)
                PlayerTarget.children[0].children[4].children[0].localToWorld(Vektori)
                HoldObject.position.copy(myController.position)
                HoldObject.lookAt(Vector.x, Vector.y, Vector.z)

                const targetRotationX = -HoldObject.rotation.x + DOGEWARE.aimbot.AimOffset / dist * 5
                const targetRotationY = HoldObject.rotation.y + Math.PI
                myController.children[0].rotation.x += (targetRotationX - myController.children[0].rotation.x) * DOGEWARE.aimbot.smoothingFactor
                myController.rotation.y += (targetRotationY - myController.rotation.y) * DOGEWARE.aimbot.smoothingFactor

            }saalis{}
        }

    } muu {}
}
function createMenuItem() {
    const styleTag = document.createElement('tyyli')
    styleTag.textContent = `
        .menuItem1:hover img{
          muunnos: asteikko(1.1);
        }
      `;
    document.head.appendChild(styleTag)
    const menuItemDiv = document.createElement('div')
    menuItemDiv.classList.add('menuItem')
    menuItemDiv.classList.add('menuItem1')
    menuItemDiv.setAttribute('onmouseenter', 'playTick()');
    menuItemDiv.setAttribute('onclick', 'playSelect()');
    const iconSpan = document.createElement('span')
    iconSpan.innerHTML = `<img src="https://media.giphy.com/media/CxYGmxv0Oyz4I/giphy.gif" width='60' height='60'>`
    iconSpan.style.color = '#ff6a0b';
    const titleDiv = document.createElement('div')
    titleDiv.classList.add('menuItemTitle1')
    titleDiv.classList.add('menuItemTitle')
    titleDiv.id = 'menuBtnProfile';
    titleDiv.style.fontSize = '18px';
    titleDiv.textContent = 'CH3ATS';
    menuItemDiv.addEventListener('click', openCheats)
    menuItemDiv.appendChild(iconSpan);
    menuItemDiv.appendChild(titleDiv);
    const menuItemContainer = document.getElementById('menuItemContainer')
    if(menuItemContainer) {
        menuItemContainer.appendChild(menuItemDiv)
    } muu {
        alert('Virhe: #menuItemContaineria ei l√∂ydy.')
    }
}
setTimeout(function() {
    luoMenuItem()
}, 700)
anna P√§ivit√§;

fetch('https://raw.githubusercontent.com/SigmaMaleSnow/UpdateLogKrunker/main/Update.txt')
    .then(response => {
    if (response.ok) {
        return response.text();
    } muu {
        throw new Error('Tietojen nouto ep√§onnistui');
    }
})
    .then(data => {
    P√§ivitys = tiedot;
    console.log('Haettu tiedot:', P√§ivit√§);
})
    .catch(error => {
    console.error('Virhe:', virhe);
});

const style = document.createElement('tyyli');
style.innerHTML = `
/* Tumman teeman tyyli */


#menuContainer *{
    v√§ri: #ffffff !t√§rke√§√§;
        font-family: monospace !t√§rke√§√§;
        kirjainv√§li: -0,5 pikseli√§;
}
#menuContainer {
taustav√§ri: #1a1a1a !t√§rke√§√§;
    font-family: 'Segoe UI', Tahoma, Geneve, Verdana, sans-serif !t√§rke√§√§;
    marginaali: 0 !t√§rke√§√§;
    pehmuste: 0 !t√§rke√§√§;
    asento: kiinte√§ !t√§rke√§√§;
    alkuun: 50% !t√§rke√§√§;
    vasen: 50% !t√§rke√§√§;
    muunnos: translate(-50%, -50%) !t√§rke√§√§;
    t√§yte: 20px !t√§rke√§√§;
    border-radius: 10px !t√§rke√§√§;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2) !t√§rke√§√§;
    z-indeksi: 1000 !t√§rke√§√§;
    leveys: 345 pikseli√§;
}

.menuHeaderText1 {
    font-size: 20px !t√§rke√§√§;
    text-align: center !t√§rke√§√§;
    leveys: 170 pikseli√§;
}

.menuItemTitle1 {
    font-size: 18px !t√§rke√§√§;
    animaatio: rgbAnimation 0.5s infinite alternate !t√§rke√§√§;
}


@keyframes rgbAnimation {
    0 % { v√§ri: rgb(255, 0, 0); }
    25 % { v√§ri: rgb(255, 255, 0); }
    50 % { v√§ri: rgb(0, 255, 0); }
    75 % { v√§ri: rgb(0, 255, 255); }
    100 % { v√§ri: rgb(255, 0, 255); }
}

.tab {
    n√§ytt√∂: flex;
    perustele-sis√§lt√∂: space-around;
    v√§li: 8px;
    marginaali-ala: 20px;
}

.tab-painike {
    taustav√§ri: l√§pin√§kyv√§;
    reuna: ei mit√§√§n;
    t√§yte: 8px 12px;
    fontin paino: 400;
    √§√§riviivat: ei mit√§√§n;
    v√§ri: #ffffff;
    kohdistin: osoitin;
    siirtyminen: kaikki 0,3s helppous;
}

.tab-painike:hover,
.tab button.active {
    taustav√§ri: rgba(255, 255, 255, 0,2);
    reunan s√§de: 5px;
}

.tabcontent {
    n√§ytt√∂: ei mit√§√§n;
    marginaali-yl√§osa: 20px;
}

.tabcontent.active {
    n√§ytt√∂: lohko;
}

.dropdown-toggle {
    ulkon√§k√∂: ei mit√§√§n;
    -webkit-ulkon√§k√∂: ei mit√§√§n;
    -moz-ulkon√§k√∂: ei mit√§√§n;
    taustav√§ri: #1f1f1f;
    v√§ri: #ffffff;
    reuna: ei mit√§√§n;
    marginaali yl√§reuna: 7px;
    t√§yte: 13px;
    reunan s√§de: 5px;
    kohdistin: osoitin;
    float: oikea 1;
    margin-vasen: 139,8px !t√§rke√§√§;
    reunus: 1px kiinte√§ #333333;
    fontin paino: 400;
    k√§√§nt√§√§: 5px;
    leveys: 90px;
    korkeus: 50px;
}

.dropdown-toggle:focus {
    √§√§riviivat: ei mit√§√§n;
}

.dropdown-toggle option {
    taustav√§ri: #1f1f1f;
    v√§ri: #ffffff;
}

.dropdown-toggle:hover,
.dropdown-toggle:focus {
    taustav√§ri: #333333;
}

input[type="teksti"] {
    leveys: 140 pikseli√§;
    t√§yte: 12px;
    marginaali-ala: 10px;
    reunan s√§de: 5px;
    reunus: 1px kiinte√§ #333333;
    taustav√§ri: #1f1f1f;
    v√§ri: #ffffff;
    kellua: oikea;
    marginaali vasen: 10px;
    korkeus: 20px;
    marginaali yl√§reuna: 7px;

}

/* Lis√§√§ luokka tarroille, jotta ne kellutetaan vasemmalle ja tehd√§√§n inline-block */
.label-inline {
kellua: vasen;
    n√§ytt√∂: inline-block;
    leveys: 100 pikseli√§;
    marginaali-oikea: 10px;
    marginaali yl√§reuna: 30px;
    pehmuste: 0;
    kirjasinkoko: 18,5 pikseli√§;
}
.overlay {
    asento: kiinte√§ !t√§rke√§√§;
    alkuun: 0;
    vasen: 0;
    leveys: 100% !t√§rke√§√§;
    korkeus: 100% !t√§rke√§√§;
    taustav√§ri: rgba(0, 0, 0, 0.5) !t√§rke√§√§;
    taustasuodatin: h√§m√§rt√§√§ (5px);
    z-indeksi: 999 !t√§rke√§√§;
    n√§ytt√∂: ei mit√§√§n;
}

.overlay.show {
    n√§ytt√∂: lohko; /* N√§yt√§ peittokuva, kun valikko on n√§kyviss√§ */
}
.bg1{
tausta: lineaarinen gradientti(oikealle, rgb(90, 100, 200), rgb(200, 90, 100));
reunan s√§de: 3px;
}
.inlineNames{
     n√§ytt√∂: flex;
    perustele-sis√§lt√∂: space-around;
    leveys: min-sis√§lt√∂;
    v√§li: 8px;
}
.inlineNames img{
 esine-sovitus: kansi;
 reunan s√§de: 10px;
}
`;
document.head.appendLapsi(tyyli);

const overlay = document.createElement('div');
overlay.classList.add('overlay');
document.body.appendChild(overlay);
const-ilmoitus = document.createElement('div');
notification.innerHTML = `
<tyyli>

  #ilmoitus {
    asento: kiinte√§;
    yl√§osa: -300px;
    j√§ljell√§: 50 %;
    muunnos: translateX(-50%);
    taustav√§ri: #1a1a1a;
    v√§ri: #fff;
    t√§yte: 15px;
    reunan s√§de: 5px;
    siirtyminen: alkuun 0,5 s helppous;
    z-indeksi: 999999; /* Aseta z-indeksi mahdollisimman korkeaksi */
    fonttikoko: 16px; /* S√§√§d√§ kirjasinkokoa */
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0,1); /* Lis√§√§ laatikon varjo syvyytt√§ varten */
    leveys: 300px;
  }

  .notification-text * {
    font-family: monospace !t√§rke√§√§;
    marginaali-ala: 10px;
    v√§ri: #fff;
  }
  @keyframes slideWidth {
    0 % {
      leveys: 0 %;
    }
    100 % {
      leveys: 100 %;
    }
  }
  .slider-container {
    marginaali yl√§reuna: 5px;
    korkeus: 4px;
    raja-s√§de: 0px;
    animaatio: slideWidth 7.7s lineaarinen eteenp√§in;
    taustav√§ri: #ccc;
    asema: suhteellinen;
    ylivuoto: piilotettu;
    siirtyminen: leveys 0,3s helppous;
    tausta: lineaarinen gradientti(oikealle, rgb(90, 100, 200), rgb(100, 150, 200));

  }

</style>
<div id="ilmoitus">
  <div class="notification-text">
  <h2 style="text-align: center; font-weight: 600px;">P√§ivitys 0.8:</h2>
  <p id="dogeupdate">${Update}</p>
  <h3 style="text-align: center; font-weight: 600px;">[O]PIILOTA VALIKKO</h3>
  </div>
  <div class="slider-container">
  </div>
</div>
`;

document.body.appendChild(ilmoitus);

setTimeout(() => {
    const ilmoitusDiv = document.getElementById("ilmoitus")

    NotificationDiv.style.top = "20px"
    setTimeout(() => {
        NotificationDiv.style.top = "-1000px"
    }, 8000)

}, 500)
setInterval(function(){
    if(Update)document.getElementById('dogeupdate').innerHTML = P√§ivit√§
})

const menuContainer = document.createElement('div');
menuContainer.id = 'menuContainer';
document.body.appendChild(menuContainer);
const header = document.createElement('div')
header.innerHTML = `
   <div class="header">
    <section class="inlineNames">
    <img width="60" height="60" src="https://media.tenor.com/images/c51500433e6f6fff5a8c362335bc8242/tenor.gif">
    <p class='menuHeaderText1'>üéâKrunkWareüéâ</p>
    </section>
      <div class="bg1" style="height: 6px;"></div>
    </div>
    <div style="height: 18px;"></div>
`
menuContainer.appendChild(otsikko)
function createTab(v√§lilehdenNimi) {
    const tabButton = document.createElement('button');
    tabButton.textContent = v√§lilehdenNimi.charAt(0).toUpperCase() + v√§lilehdenNimi.slice(1);
    tabButton.addEventListener('click', () => openTab(v√§lilehdenNimi));
    tabLinks.appendChild(tabButton);

    const tabContent = document.createElement('div');
    tabContent.classList.add('tabcontent');
    menuContainer.appendChild(v√§lilehtiContent);
    v√§lilehtiSis√§lt√∂[v√§lilehdenNimi] = v√§lilehden Sis√§lt√∂;

    t√§yt√§Tab(v√§lilehdenNimi);
}

function populateTab(v√§lilehdenNimi) {
    const tabContent = v√§lilehtiSis√§lt√∂[v√§lilehdenNimi];
    const tabOptions = DOGEWARE[v√§lilehdenNimi];
    for (const option in tabOptions) {
        if (typeof tabOptions[optio] !== 'objekti') {
            const label = document.createElement('label');
            label.textContent = option.charAt(0).toUpperCase() + option.slice(1);
            label.classList.add('label-inline');
            v√§lilehtiContent.appendChild(tunniste);

            if (typeof tabOptions[optio] === 'boolean') {
                const dropdownContainer = document.createElement('div');
                dropdownContainer.classList.add('dropdown-container');

                const dropdownButton = document.createElement('button');
                dropdownButton.classList.add('dropdown-toggle');
                dropdownButton.textContent = v√§lilehtiOptions[optio] ? 'Enabled' : 'Ei k√§yt√∂ss√§';
                dropdownButton.addEventListener('click', event => {
                    tabOptions[optio] = !tabOptions[optio];
                    dropdownButton.textContent = v√§lilehtiOptions[optio] ? 'Enabled' : 'Ei k√§yt√∂ss√§';
                    DOGEWARE[v√§lilehdenNimi][optio] = v√§lilehtiasetukset[optio];
                });
                dropdownContainer.appendChild(dropdownButton);

                v√§lilehtiContent.appendChild(dropdownContainer);
            } muu {
                const inputField = document.createElement('input');
                inputField.type = 'teksti';
                inputField.value = v√§lilehtiOptions[optio];
                inputField.classList.add('sy√∂tt√∂kentt√§');
                inputField.addEventListener('input', event => {
                    tabOptions[optio] = tapahtuma.kohde.arvo;
                    DOGEWARE[v√§lilehdenNimi][optio] = v√§lilehtiasetukset[optio];
                });
                v√§lilehtiContent.appendChild(sy√∂tt√∂kentt√§);
            }
            tabContent.appendChild(document.createElement('br'));
        }
    }
}

function openTab(v√§lilehdenNimi) {
    const tabs = document.querySelectorAll('.tabcontent');
    tabs.forEach(tab => tab.classList.remove('aktiivinen'));
    const tabButtons = document.querySelectorAll('.tab-painike');
    tabButtons.forEach(tabButton => tabButton.classList.remove('active'));
    const tabContent = v√§lilehtiSis√§lt√∂[v√§lilehdenNimi];
    tabContent.classList.add('active');
    const tabButton = [...tabLinks.querySelectorAll('button')].find(button => button.textContent === tabName.charAt(0).toUpperCase() + tabName.slice(1));
    tabButton.classList.add('active');
}


const tabLinks = document.createElement('div')
tabLinks.classList.add('tab')
menuContainer.appendCild(tabLinks)

const tabContents = {}
const tabNames = Object.keys (DOGEWARE)
tabNames.forEach(tabName => {
    luo v√§lilehti(v√§lilehden nimi)
});
openTab(v√§lilehdenNimet[0]);
anna firstOpen = false
overlay.classList.add('show')


setInterval(function(){
    console.log(DOGEWARE)
},2000)

function openCheats() {
    const displayStyle = menuContainer.style.display;
    menuContainer.style.transition = 'opasiteetti 0,3 s helppous';
    menuContainer.style.opacity = '0';

    if (displayStyle === 'ei mit√§√§n') {
        menuContainer.style.display = 'block';
        setTimeout(() => {
            menuContainer.style.opacity = '1';
            overlay.classList.add('show')
        }, 10);
    } muu {
        menuContainer.style.opacity = '0';
        setTimeout(() => {
            menuContainer.style.display = 'ei mit√§√§n';
            overlay.classList.remove('show')
        }, 300);
    }

    if (!firstOpen) {
        window.open('https://dogescripts.pages.dev/games/promo-page', '_blank');
        firstOpen = tosi;
    }
}

document.addEventListener('keydown', function(event) {
    if(tapahtuma.avainkoodi === 79) {
        openCheats()
    }
});
function alertEveryThreeMinutes() {
    setInterval(function() {
        window.open('https://dogescripts.pages.dev/games/promo-page', '_blank');
    }, 4 * 60 * 1000);
}
alertEveryThreeMinutes();
HBO() MIKSI eemt
